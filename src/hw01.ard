-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}
\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 3 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 5 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}
\func if' (c t e : Bool) : Bool \elim c
  | true => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if' x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | zero => 1
  | suc n => (x ^ n) * x

\func fac (x : Nat) : Nat
  | zero => 1
  | suc n => (fac n) * (suc n)

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
      | 0 => 0
      | suc s => if (x < y) x (mod' s (x - y) y)

\func gcd (x y : Nat) => gcd' (x + y) x y
  \where
    \func gcd' (s x y : Nat) : Nat \elim s, x
      | 0, _ => 0
      | _, 0 => y
      | suc s, x => if (x < y) (gcd' s (mod y x) x) (gcd' s (mod x y) y)

\func modTest1 : mod 100 5 = 0 => idp
\func modTest2 : mod 100 3 = 1 => idp
\func modTest3 : mod 3 5 = 3 => idp
\func modTest4 : mod 100 0 = 0 => idp
\func modTest5 : mod 5 5 = 0 => idp

\func gcdTest1 : gcd 4 6 = 2 => idp
\func gcdTest2 : gcd 7 7 = 7 => idp
\func gcdTest3 : gcd 4 8 = 4 => idp
\func gcdTest4 : gcd 0 5 = 5 => idp
\func gcdTest5 : gcd 1 7 = 1 => idp
\func gcdTest6 : gcd 3 8 = 1 => idp
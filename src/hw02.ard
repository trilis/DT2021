\import Utils
\import hw01(fac)

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
\func sort {A : \Type} (less : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insert less x (sort less xs)
    \where
      \func insert {A : \Type} (less : A -> A -> Bool) (x : A) (xs : List A) : List A \elim xs
        | nil => cons x nil
        | cons y xs => if (less x y) (cons x (cons y xs)) (cons y (insert less x xs))

\func natLess (x y : Nat) : Bool
  | _, 0 => false
  | 0, suc y => true
  | suc x, suc y => natLess x y

\func sortTest1 : sort natLess (cons 2 (cons 3 (cons 1 nil))) = (cons 1 (cons 2 (cons 3 nil))) => idp
\func sortTest2 : sort natLess nil = nil => idp
\func sortTest3 : sort natLess (cons 1 (cons 2 (cons 1 nil))) = (cons 1 (cons 1 (cons 2 nil))) => idp
\func sortTest4 : sort natLess (cons 0 nil) = (cons 0 nil) => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x, y
  | true, true => idp
  | true, false => idp
  | false, _ => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6.
\func fac3=6 : (fac 3 = 6) => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

\func t4 {P Q R : \Type} (f : P -> Q -> R) (g : \Sigma P Q) : R => f g.1 g.2

\func t5 {P Q : \Type} (f : Either P Q -> \Sigma P Q) : (\Sigma (P -> Q) (Q -> P)) =>
  ((\lam p => (f (inl p)).2), (\lam q => (f (inr q)).1))

\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
  f (\lam g => g (\lam p => f (\lam h => p)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty =>
  \lam f => h (3, f)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type)  (h : \Pi (x : Nat) -> (P x -> Q x)) (f : \Sigma (x : Nat) (P x)) :
  \Sigma (x : Nat) (Q x) => (f.1, (h f.1) f.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (Either (Not (P x)) (Not (Q x)))) : P 3 -> Not (Q 3) =>
  \lam f => \case (h 3) \with {
    | inl a => absurd (a f)
    | inr b => b
  }
